%%%%%%%%%%%%%%%%%%%%%%%%%% Journal Articles %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@article{Erwig:2011:CCR:2063239.2063245,
 author = {Erwig, Martin and Walkingshaw, Eric},
 title = {The Choice Calculus: A Representation for Software Variation},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {December 2011},
 volume = {21},
 number = {1},
 month = dec,
 year = {2011},
 issn = {1049-331X},
 pages = {6:1--6:27},
 articleno = {6},
 numpages = {27},
 url = {http://doi.acm.org/10.1145/2063239.2063245},
 doi = {10.1145/2063239.2063245},
 acmid = {2063245},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Variation, representation},
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Book Chapters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@Inbook{Erwig2013,
author="Erwig, Martin
and Walkingshaw, Eric",
editor="L{\"a}mmel, Ralf
and Saraiva, Jo{\~a}o
and Visser, Joost",
title="Variation Programming with the Choice Calculus",
bookTitle="Generative and Transformational Techniques in Software Engineering IV: International Summer School, GTTSE 2011, Braga, Portugal, July 3-9, 2011. Revised Papers",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="55--100",
abstract="The choice calculus provides a language for representing and transforming variation in software and other structured documents. Variability is captured in localized choices between alternatives. The space of all variations is organized by dimensions, which provide scoping and structure to choices. The variation space can be reduced through a process of selection, which eliminates a dimension and resolves all of its associated choices by replacing each with one of their alternatives. The choice calculus also allows the definition of arbitrary functions for the flexible construction and transformation of all kinds of variation structures. In this tutorial we will first present the motivation, general ideas, and principles that underlie the choice calculus. This is followed by a closer look at the semantics. We will then present practical applications based on several small example scenarios and consider the concepts of ''variation programming'' and ''variation querying''. The practical applications involve work with a Haskell library that supports variation programming and experimentation with the choice calculus.",
isbn="978-3-642-35992-7",
doi="10.1007/978-3-642-35992-7_2",
url="https://doi.org/10.1007/978-3-642-35992-7_2"
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Conference Papers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@inproceedings{Ataei:2017:VD:3122831.3122839,
 author = {Ataei, Parisa and Termehchy, Arash and Walkingshaw, Eric},
 title = {Variational Databases},
 booktitle = {Proceedings of The 16th International Symposium on Database Programming Languages},
 series = {DBPL '17},
 year = {2017},
 isbn = {978-1-4503-5354-0},
 location = {Munich, Germany},
 pages = {11:1--11:4},
 articleno = {11},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/3122831.3122839},
 doi = {10.1145/3122831.3122839},
 acmid = {3122839},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {data variation, variational database, variational schema},
}

@InProceedings{10.1007/978-3-319-91376-6_9,
author="Erwig, Martin
and Smeltzer, Karl",
editor="Chapman, Peter
and Stapleton, Gem
and Moktefi, Amirouche
and Perez-Kriz, Sarah
and Bellucci, Francesco",
title="Variational Pictures",
booktitle="Diagrammatic Representation and Inference",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="55--70",
abstract="Diagrams and pictures are a powerful medium to communicate ideas, designs, and art. However, authors of pictures are forced to use rudimentary and ad hoc techniques in managing multiple variants of their creations, such as copying and renaming files or abusing layers in an advanced graphical editing tool. We propose a model of variational pictures as a basis for the design of editors and other tools for managing variation in pictures. This model enjoys a number of theoretical properties that support exploratory graphical design and can help systematize picture creators' workflows.",
isbn="978-3-319-91376-6"
}

@article{Campora:2017:MGT:3177123.3158103,
 author = {Campora, John Peter and Chen, Sheng and Erwig, Martin and Walkingshaw, Eric},
 title = {Migrating Gradual Types},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2018},
 volume = {2},
 number = {POPL},
 month = dec,
 year = {2017},
 issn = {2475-1421},
 pages = {15:1--15:29},
 articleno = {15},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3158103},
 doi = {10.1145/3158103},
 acmid = {3158103},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {gradual typing, program migration, variational types},
}

@inproceedings{Chen:2016:PTI:2837614.2837665,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Principal Type Inference for GADTs},
 booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '16},
 year = {2016},
 isbn = {978-1-4503-3549-2},
 location = {St. Petersburg, FL, USA},
 pages = {416--428},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2837614.2837665},
 doi = {10.1145/2837614.2837665},
 acmid = {2837665},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Choice Type, GADT, Type Inference, Type Reconciliation, Variational Unification},
}

@article{Chen:2016:PTI:2914770.2837665,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Principal Type Inference for GADTs},
 journal = {SIGPLAN Not.},
 issue_date = {January 2016},
 volume = {51},
 number = {1},
 month = jan,
 year = {2016},
 issn = {0362-1340},
 pages = {416--428},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2914770.2837665},
 doi = {10.1145/2914770.2837665},
 acmid = {2837665},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Choice Type, GADT, Type Inference, Type Reconciliation, Variational Unification},
}

@inproceedings{Chen:2014:EDT:2543728.2543731,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Early Detection of Type Errors in C++ Templates},
 booktitle = {Proceedings of the ACM SIGPLAN 2014 Workshop on Partial Evaluation and Program Manipulation},
 series = {PEPM '14},
 year = {2014},
 isbn = {978-1-4503-2619-3},
 location = {San Diego, California, USA},
 pages = {133--144},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2543728.2543731},
 doi = {10.1145/2543728.2543731},
 acmid = {2543731},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {c++ templates, choice types, metaprogramming, type reflection, type
                  systems},
}
@inproceedings{Chen:2014:CTD:2535838.2535863,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Counter-factual Typing for Debugging Type Errors},
 booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '14},
 year = {2014},
 isbn = {978-1-4503-2544-8},
 location = {San Diego, California, USA},
 pages = {583--594},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2535838.2535863},
 doi = {10.1145/2535838.2535863},
 acmid = {2535863},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {change suggestions, choice types, error localization, type error
                  messages, type inference, type-error debugging},
}

@article{Chen:2014:CTD:2578855.2535863,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Counter-factual Typing for Debugging Type Errors},
 journal = {SIGPLAN Not.},
 issue_date = {January 2014},
 volume = {49},
 number = {1},
 month = jan,
 year = {2014},
 issn = {0362-1340},
 pages = {583--594},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2578855.2535863},
 doi = {10.1145/2578855.2535863},
 acmid = {2535863},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {change suggestions, choice types, error localization, type error
                  messages, type inference, type-error debugging},
}

@article{Chen:2017:EDT:3109510.3109551,
 author = {Chen, Sheng and Erwig, Martin and Smeltzer, Karl},
 title = {Exploiting Diversity in Type Checkers for Better Error Messages},
 journal = {J. Vis. Lang. Comput.},
 issue_date = {April 2017},
 volume = {39},
 number = {C},
 month = apr,
 year = {2017},
 issn = {1045-926X},
 pages = {10--21},
 numpages = {12},
 url = {https://doi.org/10.1016/j.jvlc.2016.07.001},
 doi = {10.1016/j.jvlc.2016.07.001},
 acmid = {3109551},
 publisher = {Academic Press, Inc.},
 address = {Orlando, FL, USA},
 keywords = {Tool combining, Type-error diagnosing},
}

%%%% this one is a direct predecessor %%%%
@article{Chen:2014:TPA:2692915.2628155,
 author = {Chen, Sheng and Erwig, Martin},
 title = {Type-based Parametric Analysis of Program Families},
 journal = {SIGPLAN Not.},
 issue_date = {September 2014},
 volume = {49},
 number = {9},
 month = aug,
 year = {2014},
 issn = {0362-1340},
 pages = {39--51},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2692915.2628155},
 doi = {10.1145/2692915.2628155},
 acmid = {2628155},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {choice calculus, constraint-based type system, program families, static-analysis lifting, variational types},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Thesis %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@phdthesis{Walk13thesis,
  author   = {Walkingshaw, E.},
  title    = {{The Choice Calculus: A Formal Language of Variation}},
  school   = {{Oregon State University}},
  year     = 2013,
  note     = {\url{http://hdl.handle.net/1957/40652}},
  kind     = {Thesis},
  status   = {Appeared},
  abstract = {In this thesis I present the choice calculus, a formal language for representing variation in software and other structured artifacts. The choice calculus is intended to support variation research in a way similar to the lambda calculus in programming language research. Specifically, it provides a simple formal basis for presenting, proving, and communicating theoretical results. It can serve as a common language of discourse for researchers working on different views of similar problems and provide a shared back end in tools. \\ This thesis collects a large amount of work on the choice calculus. It defines the syntax and denotational semantics of the language along with modular language extensions that add features important to variation research. It presents several theoretical results related to the choice calculus, such as an equivalence relation that supports semantics-preserving transformations of choice calculus expressions, and a type system for ensuring that an expression is well formed. It also presents a Haskell DSEL based on the choice calculus for exploring the concept of variational programming.}
}